/* 
 * Copyright (c) 2025 Student & Campus Services GmbH
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
package eu.eduTap.core.router

import io.ktor.client.*
import io.ktor.client.request.*
import io.ktor.http.*
import kotlinx.serialization.Serializable
import java.time.LocalDate

class CardsApi(httpClient: HttpClient, apiUrl: String) : ESCApi(httpClient, apiUrl) {
  private val cardApiUrl = "${apiUrl}cards"

  suspend fun getByEsi(esi: String): List<Card> {
    @Serializable
    data class GetCardsResponse(val content: List<CardLite>)

    val cards = makeRequest<GetCardsResponse> {
      httpClient.get(cardApiUrl) {
        url {
          parameters.append("search", "person.identifierCode:ESI<+>person.identifier:${esi}")
        }
      }
    }
      .content
      .map { getByCardNumber(it.cardNumber) }

    return cards
  }

  suspend fun getByCardNumber(cardNumber: String): Card {
    return makeRequest {
      httpClient.get("${cardApiUrl}/${cardNumber}")
    }
  }

  suspend fun create(
    esi: String,
    displayName: String,
    expiresAt: LocalDate,
    issuerIdentifier: String,
    issuedAt: LocalDate = LocalDate.now(),
    processorIdentifier: String? = null,
    cardType: CardType = CardType.UNKNOWN,
  ): Card {
    return makeRequest {
      httpClient.post(cardApiUrl) {
        contentType(ContentType.Application.Json)

        setBody(
          CardUpdate(
            cardNumber = null, // Will be generated by the server if not provided
            cardStatusType = CardStatusType.ACTIVE,
            cardType = cardType,
            displayName = displayName,
            expiresAt = expiresAt.toString(),
            issuedAt = issuedAt.toString(),
            issuerIdentifier = issuerIdentifier,
            personIdentifier = esi,
            processorIdentifier = processorIdentifier
          )
        )
      }
    }
  }

  suspend fun update(
    cardNumber: String,
    cardStatusType: CardStatusType,
    displayName: String,
    expiresAt: LocalDate,
    issuedAt: LocalDate,
    issuerIdentifier: String,
    esi: String,
    processorIdentifier: String? = null,
    cardType: CardType = CardType.UNKNOWN,
  ): Card {
    return makeRequest {
      httpClient.put("${cardApiUrl}/$cardNumber") {
        contentType(ContentType.Application.Json)

        setBody(
          CardUpdate(
            cardNumber = cardNumber,
            cardStatusType = cardStatusType,
            cardType = cardType,
            displayName = displayName,
            expiresAt = expiresAt.toString(),
            issuedAt = issuedAt.toString(),
            issuerIdentifier = issuerIdentifier,
            personIdentifier = esi,
            processorIdentifier = processorIdentifier
          )
        )
      }
    }
  }

  suspend fun delete(cardNumber: String) {
    makeRequest<String> {
      httpClient.delete("${cardApiUrl}/$cardNumber")
    }
  }

  /**
   * Returns Base64 encoded QR code.
   */
  suspend fun getQrCode(
    cardNumber: String,
    orientation: QrCodeOrientation? = null,
    color: QrCodeColor? = null,
    size: QrCodeSize? = null,
  ): String {
    return makeRequest {
      httpClient.get("${cardApiUrl}/$cardNumber/qr") {
        accept(ContentType.Text.Plain)

        url {
          if (orientation != null) {
            parameters.append("orientation", orientation.name)
          }
          if (color != null) {
            parameters.append("colours", color.name)
          }
          if (size != null) {
            parameters.append("size", size.name)
          }
        }
      }
    }
  }
}
